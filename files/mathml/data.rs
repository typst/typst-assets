// This file is generated by `codegen/src/mathml.rs` and derived from:
//
// - https://raw.githubusercontent.com/w3c/mathml-core/refs/heads/main/tables/operator-dictionary-compact.html
// - https://raw.githubusercontent.com/w3c/mathml-core/refs/heads/main/tables/inline-axis-operators.html
//
// Do not edit by hand.

#![cfg_attr(rustfmt, rustfmt_skip)]

use super::{Form, Properties, OperatorInfo};

static CATEGORY_DEFAULT: OperatorInfo = OperatorInfo { 
    form: None,
    lspace: 0.2777777777777778,
    rspace: 0.2777777777777778,
    properties: Properties::empty(),
};

static CATEGORY_FORCEDEFAULT: OperatorInfo = OperatorInfo { 
    form: None,
    lspace: 0.2777777777777778,
    rspace: 0.2777777777777778,
    properties: Properties::empty(),
};

static CATEGORY_A: OperatorInfo = OperatorInfo { 
    form: Some(Form::Infix),
    lspace: 0.2777777777777778,
    rspace: 0.2777777777777778,
    properties: Properties::from_bits_retain(Properties::STRETCHY.bits()),
};

static CATEGORY_B: OperatorInfo = OperatorInfo { 
    form: Some(Form::Infix),
    lspace: 0.2222222222222222,
    rspace: 0.2222222222222222,
    properties: Properties::empty(),
};

static CATEGORY_C: OperatorInfo = OperatorInfo { 
    form: Some(Form::Infix),
    lspace: 0.16666666666666666,
    rspace: 0.16666666666666666,
    properties: Properties::empty(),
};

static CATEGORY_D: OperatorInfo = OperatorInfo { 
    form: Some(Form::Prefix),
    lspace: 0.0,
    rspace: 0.0,
    properties: Properties::empty(),
};

static CATEGORY_E: OperatorInfo = OperatorInfo { 
    form: Some(Form::Postfix),
    lspace: 0.0,
    rspace: 0.0,
    properties: Properties::empty(),
};

static CATEGORY_F: OperatorInfo = OperatorInfo { 
    form: Some(Form::Prefix),
    lspace: 0.0,
    rspace: 0.0,
    properties: Properties::from_bits_retain(Properties::STRETCHY.bits() | Properties::SYMMETRIC.bits()),
};

static CATEGORY_G: OperatorInfo = OperatorInfo { 
    form: Some(Form::Postfix),
    lspace: 0.0,
    rspace: 0.0,
    properties: Properties::from_bits_retain(Properties::STRETCHY.bits() | Properties::SYMMETRIC.bits()),
};

static CATEGORY_H: OperatorInfo = OperatorInfo { 
    form: Some(Form::Prefix),
    lspace: 0.16666666666666666,
    rspace: 0.16666666666666666,
    properties: Properties::from_bits_retain(Properties::SYMMETRIC.bits() | Properties::LARGEOP.bits()),
};

static CATEGORY_I: OperatorInfo = OperatorInfo { 
    form: Some(Form::Postfix),
    lspace: 0.0,
    rspace: 0.0,
    properties: Properties::from_bits_retain(Properties::STRETCHY.bits()),
};

static CATEGORY_J: OperatorInfo = OperatorInfo { 
    form: Some(Form::Prefix),
    lspace: 0.16666666666666666,
    rspace: 0.16666666666666666,
    properties: Properties::from_bits_retain(Properties::SYMMETRIC.bits() | Properties::LARGEOP.bits() | Properties::MOVABLELIMITS.bits()),
};

static CATEGORY_K: OperatorInfo = OperatorInfo { 
    form: Some(Form::Infix),
    lspace: 0.0,
    rspace: 0.0,
    properties: Properties::empty(),
};

static CATEGORY_L: OperatorInfo = OperatorInfo { 
    form: Some(Form::Prefix),
    lspace: 0.16666666666666666,
    rspace: 0.0,
    properties: Properties::empty(),
};

static CATEGORY_M: OperatorInfo = OperatorInfo { 
    form: Some(Form::Infix),
    lspace: 0.0,
    rspace: 0.16666666666666666,
    properties: Properties::empty(),
};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub(crate) enum Category {
    Default,
    ForceDefault,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
}

pub(crate) fn from_encoding(encoding: u8) -> Category {
    match encoding {
        0x00 => Category::A,
        0x04 => Category::B,
        0x08 => Category::C,
        0x01 => Category::D,
        0x02 => Category::E,
        0x05 => Category::F,
        0x06 => Category::G,
        0x09 => Category::H,
        0x0a => Category::I,
        0x0d => Category::J,
        0x0c => Category::K,
        _ => unreachable!(),
    }
}

pub(crate) fn get_category_info(category: Category) -> &'static OperatorInfo {
    match category {
        Category::Default => &CATEGORY_DEFAULT,
        Category::ForceDefault => &CATEGORY_FORCEDEFAULT,
        Category::A => &CATEGORY_A,
        Category::B => &CATEGORY_B,
        Category::C => &CATEGORY_C,
        Category::D => &CATEGORY_D,
        Category::E => &CATEGORY_E,
        Category::F => &CATEGORY_F,
        Category::G => &CATEGORY_G,
        Category::H => &CATEGORY_H,
        Category::I => &CATEGORY_I,
        Category::J => &CATEGORY_J,
        Category::K => &CATEGORY_K,
        Category::L => &CATEGORY_L,
        Category::M => &CATEGORY_M,
    }
}

pub(crate) const OPERATOR_TABLE: &[(u16, u8)] = &[
    (0x0025, 0x81),
    (0x002a, 0x81),
    (0x002b, 0x41),
    (0x002d, 0x41),
    (0x002e, 0x81),
    (0x002f, 0xc1),
    (0x003f, 0x82),
    (0x005c, 0xc1),
    (0x005e, 0x81),
    (0x005f, 0xc1),
    (0x00b1, 0x41),
    (0x00b7, 0x81),
    (0x00d7, 0x81),
    (0x00f7, 0x41),
    (0x0322, 0x41),
    (0x0323, 0x81),
    (0x032e, 0x81),
    (0x0422, 0x81),
    (0x0443, 0x81),
    (0x0444, 0x41),
    (0x0461, 0xc4),
    (0x0590, 0x06),
    (0x059a, 0x00),
    (0x05aa, 0x05),
    (0x05b0, 0x06),
    (0x05b9, 0x01),
    (0x05bc, 0x00),
    (0x05cc, 0x0a),
    (0x05da, 0x00),
    (0x05ea, 0x07),
    (0x05f3, 0x0d),
    (0x0606, 0xc1),
    (0x0612, 0x45),
    (0x0617, 0x83),
    (0x0627, 0x44),
    (0x0636, 0x41),
    (0x0638, 0x41),
    (0x0640, 0x81),
    (0x068c, 0x43),
    (0x0693, 0x44),
    (0x0697, 0x81),
    (0x0698, 0x41),
    (0x0699, 0x83),
    (0x069d, 0x43),
    (0x06a0, 0x82),
    (0x06ba, 0x81),
    (0x06bb, 0x43),
    (0x06c4, 0x84),
    (0x06c9, 0x84),
    (0x06ce, 0x42),
    (0x06d2, 0x42),
    (0x0705, 0x82),
    (0x0b94, 0x01),
    (0x0b95, 0x43),
    (0x0b99, 0x01),
    (0x0b9b, 0x07),
    (0x0ba5, 0x02),
    (0x0ba8, 0x08),
    (0x0bb1, 0x01),
    (0x0bb3, 0x01),
    (0x0bb5, 0x01),
    (0x0bb8, 0x01),
    (0x0bba, 0x05),
    (0x0bcb, 0x81),
    (0x0bcd, 0x81),
    (0x0bf0, 0x02),
    (0x0bf4, 0x0c),
    (0x0d00, 0x00),
    (0x0d10, 0x00),
    (0x0d20, 0x01),
    (0x0d34, 0x04),
    (0x0d42, 0x00),
    (0x0d52, 0x00),
    (0x0d62, 0x00),
    (0x0d72, 0x04),
    (0x0d7c, 0x04),
    (0x0db8, 0x41),
    (0x0dbc, 0x41),
    (0x0dc4, 0x42),
    (0x0dc6, 0x83),
    (0x0dd4, 0x84),
    (0x0de2, 0x81),
    (0x0df5, 0x47),
    (0x0e1d, 0x82),
    (0x0e1f, 0x40),
    (0x0e2f, 0x89),
    (0x0e38, 0x43),
    (0x0e3b, 0x83),
    (0x0e3e, 0x41),
    (0x0e3f, 0x81),
    (0x0e40, 0x40),
    (0x0e50, 0x81),
    (0x0e51, 0x40),
    (0x0e61, 0x43),
    (0x0e64, 0x82),
    (0x0edb, 0x41),
    (0x0edc, 0x82),
    (0x0ef6, 0x41),
    (0x0efb, 0x41),
    (0x0efd, 0x41),
    (0x0efe, 0x81),
    (0x0f04, 0x04),
    (0x0f0c, 0x06),
    (0x0f30, 0x0f),
    (0x0f40, 0x0d),
    (0x0f60, 0x06),
    (0x0f6a, 0x04),
    (0x0f70, 0x04),
    (0x0f7a, 0x04),
    (0x0f80, 0x08),
    (0x0f95, 0x01),
    (0x0fa0, 0x00),
    (0x0fb8, 0x01),
    (0x1021, 0x11),
    (0x1028, 0x51),
    (0x102b, 0x11),
    (0x102d, 0x11),
    (0x105b, 0x51),
    (0x107b, 0x52),
    (0x10ac, 0x11),
    (0x10b1, 0x11),
    (0x1331, 0x11),
    (0x1416, 0x51),
    (0x1418, 0x11),
    (0x141c, 0x11),
    (0x1600, 0x12),
    (0x1603, 0x12),
    (0x1607, 0x11),
    (0x160f, 0xd3),
    (0x1612, 0x12),
    (0x161f, 0x14),
    (0x162b, 0x99),
    (0x1634, 0x12),
    (0x163c, 0x11),
    (0x16be, 0x12),
    (0x16c0, 0xd4),
    (0x1708, 0x51),
    (0x170a, 0x51),
    (0x1710, 0x11),
    (0x1719, 0x11),
    (0x1729, 0x51),
    (0x1b72, 0x51),
    (0x1b95, 0x12),
    (0x1bc0, 0x11),
    (0x1be6, 0x51),
    (0x1be8, 0x51),
    (0x1bea, 0x51),
    (0x1bec, 0x51),
    (0x1bee, 0x51),
    (0x1d80, 0x51),
    (0x1d83, 0x51),
    (0x1d85, 0x51),
    (0x1d87, 0x51),
    (0x1d89, 0x51),
    (0x1d8b, 0x51),
    (0x1d8d, 0x51),
    (0x1d8f, 0x51),
    (0x1d91, 0x51),
    (0x1d93, 0x51),
    (0x1d95, 0x51),
    (0x1d97, 0x51),
    (0x1d99, 0x51),
    (0x1d9b, 0x10),
    (0x1dab, 0x15),
    (0x1dd8, 0x51),
    (0x1dda, 0x51),
    (0x1dfc, 0x51),
    (0x1e00, 0xdb),
    (0x1e0b, 0x90),
    (0x1e1b, 0x92),
    (0x1e1d, 0xd2),
    (0x1eec, 0x12),
    (0x1efc, 0xd1),
    (0x1eff, 0xd1),
    (0x2021, 0x22),
    (0x2025, 0x23),
    (0x2029, 0x61),
    (0x205d, 0x61),
    (0x205e, 0xa2),
    (0x2060, 0x21),
    (0x207c, 0x62),
    (0x207e, 0xa1),
    (0x20a8, 0x21),
    (0x20af, 0xa1),
    (0x20b0, 0x21),
    (0x20b2, 0x23),
    (0x20b8, 0x22),
    (0x22c6, 0xa2),
    (0x22c9, 0xa1),
    (0x22ca, 0x22),
    (0x22cd, 0xa1),
    (0x22d8, 0x23),
    (0x22dc, 0xa1),
    (0x22dd, 0x21),
    (0x22f7, 0xa1),
    (0x2302, 0xa1),
    (0x2311, 0x21),
    (0x2320, 0x21),
    (0x2325, 0x21),
    (0x2327, 0x21),
    (0x2331, 0x21),
    (0x2416, 0x61),
    (0x2419, 0x23),
    (0x241d, 0x23),
    (0x2432, 0x26),
    (0x243e, 0xa1),
    (0x2457, 0x21),
    (0x24db, 0x22),
    (0x2709, 0x61),
    (0x270b, 0x61),
    (0x2722, 0xa2),
    (0x272a, 0x61),
    (0x27b4, 0xa2),
    (0x27cd, 0x21),
    (0x27dc, 0xa6),
    (0x2b73, 0x61),
    (0x2be7, 0x61),
    (0x2be9, 0x61),
    (0x2beb, 0x61),
    (0x2bed, 0x61),
    (0x2bef, 0x61),
    (0x2d80, 0x61),
    (0x2d84, 0x61),
    (0x2d86, 0x61),
    (0x2d88, 0x61),
    (0x2d8a, 0x61),
    (0x2d8c, 0x61),
    (0x2d8e, 0x61),
    (0x2d90, 0x61),
    (0x2d92, 0x61),
    (0x2d94, 0x61),
    (0x2d96, 0x61),
    (0x2d98, 0x62),
    (0x2dd9, 0x61),
    (0x2ddb, 0x61),
    (0x2dfd, 0x61),
];

pub(crate) const TWO_ASCII_CHARS_TABLE: &[&str] = &[
    "!!",
    "!=",
    "&&",
    "**",
    "*=",
    "++",
    "+=",
    "--",
    "-=",
    "->",
    "//",
    "/=",
    ":=",
    "<=",
    "<>",
    "==",
    ">=",
    "||",
];

pub(crate) const FENCE_TABLE: &[(char, u8)] = &[
    ('\u{28}', 0x02),
    ('\u{5B}', 0x01),
    ('\u{5D}', 0x01),
    ('\u{7B}', 0x03),
    ('\u{331}', 0x01),
    ('\u{2016}', 0x01),
    ('\u{2018}', 0x02),
    ('\u{201C}', 0x02),
    ('\u{2308}', 0x04),
    ('\u{2329}', 0x02),
    ('\u{2772}', 0x02),
    ('\u{27E6}', 0x0a),
    ('\u{2980}', 0x01),
    ('\u{2983}', 0x17),
    ('\u{29D8}', 0x04),
    ('\u{29FC}', 0x02),
];

pub(crate) const SEPARATOR_TABLE: &[char] = &['\u{2C}', '\u{3B}', '\u{2063}'];

pub(crate) const INLINE_AXIS_BMP_TABLE: &[u16] = &[
    0x003d,
    0x005e,
    0x005f,
    0x007e,
    0x00af,
    0x02c6,
    0x02c7,
    0x02c9,
    0x02cd,
    0x02dc,
    0x02f7,
    0x0302,
    0x0332,
    0x203e,
    0x20d0,
    0x20d1,
    0x20d6,
    0x20d7,
    0x20e1,
    0x2190,
    0x2192,
    0x2194,
    0x2198,
    0x2199,
    0x219a,
    0x219b,
    0x219c,
    0x219d,
    0x219e,
    0x21a0,
    0x21a2,
    0x21a3,
    0x21a4,
    0x21a6,
    0x21a9,
    0x21aa,
    0x21ab,
    0x21ac,
    0x21ad,
    0x21ae,
    0x21b4,
    0x21b9,
    0x21bc,
    0x21bd,
    0x21c0,
    0x21c1,
    0x21c4,
    0x21c6,
    0x21c7,
    0x21c9,
    0x21cb,
    0x21cc,
    0x21cd,
    0x21ce,
    0x21cf,
    0x21d0,
    0x21d2,
    0x21d4,
    0x21da,
    0x21db,
    0x21dc,
    0x21dd,
    0x21e0,
    0x21e2,
    0x21e4,
    0x21e5,
    0x21e6,
    0x21e8,
    0x21f0,
    0x21f4,
    0x21f6,
    0x21f7,
    0x21f8,
    0x21f9,
    0x21fa,
    0x21fb,
    0x21fc,
    0x21fd,
    0x21fe,
    0x21ff,
    0x2322,
    0x2323,
    0x23b4,
    0x23b5,
    0x23dc,
    0x23dd,
    0x23de,
    0x23df,
    0x23e0,
    0x23e1,
    0x2500,
    0x2794,
    0x2799,
    0x279b,
    0x279c,
    0x279d,
    0x279e,
    0x279f,
    0x27a0,
    0x27a1,
    0x27a5,
    0x27a6,
    0x27a8,
    0x27a9,
    0x27aa,
    0x27ab,
    0x27ac,
    0x27ad,
    0x27ae,
    0x27af,
    0x27b1,
    0x27b3,
    0x27b5,
    0x27b8,
    0x27ba,
    0x27bb,
    0x27bc,
    0x27bd,
    0x27be,
    0x27f4,
    0x27f5,
    0x27f6,
    0x27f7,
    0x27f8,
    0x27f9,
    0x27fa,
    0x27fb,
    0x27fc,
    0x27fd,
    0x27fe,
    0x27ff,
    0x2900,
    0x2901,
    0x2902,
    0x2903,
    0x2904,
    0x2905,
    0x2906,
    0x2907,
    0x290c,
    0x290d,
    0x290e,
    0x290f,
    0x2910,
    0x2911,
    0x2914,
    0x2915,
    0x2916,
    0x2917,
    0x2918,
    0x2919,
    0x291a,
    0x291b,
    0x291c,
    0x291d,
    0x291e,
    0x291f,
    0x2920,
    0x2942,
    0x2943,
    0x2944,
    0x2945,
    0x2946,
    0x2947,
    0x2948,
    0x294a,
    0x294b,
    0x294e,
    0x2950,
    0x2952,
    0x2953,
    0x2956,
    0x2957,
    0x295a,
    0x295b,
    0x295e,
    0x295f,
    0x2962,
    0x2964,
    0x2966,
    0x2967,
    0x2968,
    0x2969,
    0x296a,
    0x296b,
    0x296c,
    0x296d,
    0x2970,
    0x2971,
    0x2972,
    0x2973,
    0x2974,
    0x2975,
    0x297c,
    0x297d,
    0x2b04,
    0x2b05,
    0x2b0c,
    0x2b30,
    0x2b31,
    0x2b32,
    0x2b33,
    0x2b34,
    0x2b35,
    0x2b36,
    0x2b37,
    0x2b38,
    0x2b39,
    0x2b3a,
    0x2b3b,
    0x2b3c,
    0x2b3d,
    0x2b3e,
    0x2b40,
    0x2b41,
    0x2b42,
    0x2b43,
    0x2b44,
    0x2b45,
    0x2b46,
    0x2b47,
    0x2b48,
    0x2b49,
    0x2b4a,
    0x2b4b,
    0x2b4c,
    0x2b60,
    0x2b62,
    0x2b64,
    0x2b6a,
    0x2b6c,
    0x2b70,
    0x2b72,
    0x2b7a,
    0x2b7c,
    0x2b80,
    0x2b82,
    0x2b84,
    0x2b86,
    0x2b95,
    0xfe35,
    0xfe36,
    0xfe37,
    0xfe38,
];

pub(crate) const INLINE_AXIS_NON_BMP_TABLE: &[char] = &['\u{1EEF0}', '\u{1EEF1}'];
